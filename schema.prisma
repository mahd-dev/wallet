generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // extensions = [postgis]
}

enum UserGender {
  Male
  Female
}

model User {
  oidcId       String        @id @unique
  firstName    String?
  lastName     String?
  gender       UserGender?
  date     DateTime?
  email        String?
  tel          String?
  picture      String?
  UserDevices  UserDevice[]
  transactions Transaction[]
  budgets      Budget[]
  reports      Report[]
  password     String?
  otp          OtpVerification[]
  categories          Category[]
  notifications Notification[]
}

model Category {
  id           String       @id @unique
  name         String
  icon         String?
  iconColor String? 
  type         Typetransaction @default(expense)
  transactions Transaction[]
  Budgets      Budget[]
  userId      String?
  user        User?         @relation(fields: [userId], references: [oidcId])
}

enum Typetransaction {
  income
  expense
}

model Transaction {
  transaction_id String          @id @unique
  user_id        String?
  category_id    String?
  amount         Float
  date           DateTime?
  description    String?
  type           Typetransaction @default(expense)
  user           User?           @relation(fields: [user_id], references: [oidcId])
  category       Category?       @relation(fields: [category_id], references: [id])
}

model Budget {
  budget_id       String    @id @unique
  user_id         String?
  category_id     String?
  amount          Float?
  month           DateTime?
  created_at      DateTime? @default(now())
  alert_threshold Int?
  user            User?     @relation(fields: [user_id], references: [oidcId])
  category        Category? @relation(fields: [category_id], references: [id])
}

model Report {
  report_id  String  @id @unique
  user_id    String?
  created_at String?
  file_path  String?
  user       User?   @relation(fields: [user_id], references: [oidcId])
}

model OtpVerification {
  id        String   @id @default(uuid()) 
  user_id   String    
  @@index([user_id])
  email     String?  
  otp       String   
  expiresAt DateTime 
  createdAt DateTime @default(now()) // Timestamp of when OTP was created

  // Relation to User model
  user      User   @relation(fields: [user_id], references: [oidcId])
}


model UserDevice {
  User   User   @relation(fields: [userId], references: [oidcId])
  userId String
  token  String @unique
  ua     Json?

  @@id([userId, token])
}

model Notification {
  id String @id @unique

  userId String
  User   User   @relation(fields: [userId], references: [oidcId])

  t      DateTime @default(now())
  isRead Boolean  @default(false)
  data   Json
}